@startuml password_reset_sequence

title Password Reset Sequence

actor User
participant "Frontend" as FE
participant "Auth Service" as Auth
participant "User Service" as UserSvc
participant "Email Service" as Email
participant "Session Store" as Session

== Request Password Reset ==
User -> FE: Clicks 'Forgot Password'
FE -> User: Shows email input form
User -> FE: Enters email
FE -> Auth: POST /auth/password/reset/request {email}

Auth -> UserSvc: findUserByEmail(email)
UserSvc --> Auth: User details

Auth -> Session: createPasswordResetToken(userId)
Session --> Auth: {resetToken, expiresAt}

Auth -> Email: sendPasswordResetEmail(email, resetToken)
Email --> Auth: Email queued

Auth --> FE: 200 {message: 'If account exists, reset email sent'}
FE -> User: Show success message

== Reset Password ==
User -> Email: Clicks reset link
Email -> FE: GET /auth/password/reset?token=xyz
FE -> User: Shows password reset form

User -> FE: Enters new password
FE -> Auth: POST /auth/password/reset {token, newPassword}

Auth -> Session: validatePasswordResetToken(token)
Session --> Auth: {valid: true, userId, email} or {valid: false, reason}

alt Valid Token
    Auth -> UserSvc: updatePassword(userId, newPassword)
    UserSvc --> Auth: Password updated
    
    Auth -> Session: invalidateAllSessions(userId)
    Auth -> Session: invalidateResetToken(token)
    
    Auth -> Email: sendPasswordChangedConfirmation(email)
    Email --> Auth: Email queued
    
    Auth --> FE: 200 {message: 'Password updated successfully'}
    FE -> User: Show success message & redirect to login
else Invalid/Expired Token
    Auth --> FE: 400 {error: 'Invalid or expired token'}
    FE -> User: Show error message with option to resend
end

@enduml
